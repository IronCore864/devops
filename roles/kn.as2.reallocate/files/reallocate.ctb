#!/usr/bin/ksh

# $Id: reallocate.ctb,v 1.5 2015/05/21 09:08:46 Jurij.Fajnberg Exp $

# Synopsys:
#   Provides necessary functionality to connect AS2 and EDI servers:
#   1. Checks all res files and archive them according to the AS2-To from their content.
#   2. Checks all subdirectories of '~/e-AS2/interface/out' and creates the corresponding subdirectories of '~/tosend' if not existed, yet.
#   3. Checks all zip files in '~/tosend', extract their contents, and removes processed zip files.
#   4. Checks all visible files in the subdirectories of '~/tosend' and moves them to the corresponding subdirectories of '~/e-AS2/interface/out'.
# Parameter:
#   1. Maximum allowed number of files to transfer to target EDI system in one run.
#      Optional. Default is 255.
# Return:
#   0 - successf,
# !=0 - failure.

[[ -s /ib/.as2env ]] && . /ib/.as2env                                       # Read FPATH and EXIT_CODES_FILE environment variables

typeset -r   as2_instance=$1
typeset -r   configurationPath=$2                                           # Location of configuration file

typeset -r   scriptBase=$(basename $0 '.ctb')                               # Basename of this script
typeset -r   scriptLock=/ib/sem/${as2_instance}.${scriptBase}.lck           # Locking semaphore for working

[[ -f ${scriptLock} ]] && exit 0                                            # Do nothing if previously started script is still running
print $$ > ${scriptLock}                                                    # Create semaphore showing that ths script is running

trap 'exit $?' ERR                                                          # Exit script if ERR was trapped
trap "rm -f ${scriptLock}" EXIT                                             # Remove semaphore showing that ths script is running

typeset -fu checkVars compileProperties getExitCode                         # Autoload some functions

                                                                            # Read parameters from configuration file
eval "$(compileProperties -p ${as2_instance} -r ${configurationPath}/${scriptBase}.cfg)"

getExitCode -x 'EX_CONFIG' 'EX_OK'                                          # Prepare use of necessary codes

typeset      counter                                                        # Collected files counter
typeset      dir                                                            # Subdirectories of as2_work_directory
typeset      file                                                           # Current file name
typeset      ourList=''                                                     # List of received files

checkVars 'as2_direction'
if [[ ${as2_direction} == *R* ]]; then
  checkVars 'as2_download_directory' 'as2_ids' 'as2_to_edi_max' 'edi_host' 

  cd ${as2_download_directory}

  counter=${as2_to_edi_max}
  for file in *.res; do
    [[ -s ${file} ]] || continue                                            # No file found
                                                                            # Create list of all known received files and rename all unknown ones
    egrep -q "^AS2TO +\[(${as2_ids})\]" ${file} && ourList="${ourList} ${file} ${file%.res}" || mv ${file} ${file}.unknown
    (( counter = counter - 1 ))                                             # Count collected files
    (( counter == 0 )) && break                                             # Stop after arriving of maximum allowed number of files
  done

  if [[ -n ${ourList} ]]; then                                              # Archive, compress, and remove all files received for sindbad
    tar cf - ${ourList} 2> /dev/null | gzip -9c > ${edi_host}.$(date +%Y%m%d%H%M%S).tgz.tmp
    rm -f ${ourList}
  fi

  for file in *.tgz.tmp; do                                                 # Make compressed files visible for download
    [[ -s ${file} ]] && mv ${file} ${file%.tmp}
  done
fi

if [[ ${as2_direction} == *S* ]]; then
  checkVars 'as2_upload_directory' 'as2_work_directory'

  for file in ${as2_work_directory}/*.zip; do                               # Extract contents of all valid zip files in ~/tosend
    [[ -s ${file} ]] && unzip -t ${file} > /dev/null 2>&1 && unzip -o -qq ${file} -d ${as2_work_directory} && rm -f ${file}
  done

  for dir in ${as2_work_directory}/*; do                                    # Move complete files to ${as2_upload_directory}/${dir##*/}/<partner ID>
    [[ -d ${dir} ]] || continue                                             # Ignore plain files
    for file in ${as2_work_directory}/${dir##*/}/*; do                      # Hidden files (beginning by .) are not visible here
      if [[ -s ${file} ]]; then
        if [[ ! -d ${as2_upload_directory}/${dir##*/} ]]; then
          print -u2 "Unknown profile id '${dir##*/}' skipped"
          break
        fi
        mv "${file}" ${as2_upload_directory}/${dir##*/}/
      fi
    done
  done
fi

exit ${EX_OK}
